{"version":3,"file":"index.umd.js","sources":["../src/withImmer.ts","../src/atomWithImmer.ts","../src/useImmerAtom.ts"],"sourcesContent":["import { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { atom } from 'jotai/vanilla'\nimport type { PrimitiveAtom, WritableAtom } from 'jotai/vanilla'\n\nconst cache1 = new WeakMap()\nconst memo1 = <T>(create: () => T, dep1: object): T =>\n  (cache1.has(dep1) ? cache1 : cache1.set(dep1, create())).get(dep1)\n\nexport function withImmer<Value>(\n  anAtom: PrimitiveAtom<Value>\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], void>\n\nexport function withImmer<Value, Result>(\n  anAtom: WritableAtom<Value, [Value], Result>\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], Result>\n\nexport function withImmer<Value, Result>(\n  anAtom: WritableAtom<Value, [Value], Result>\n) {\n  return memo1(() => {\n    const derivedAtom = atom(\n      (get) => get(anAtom),\n      (get, set, fn: Value | ((draft: Draft<Value>) => void)) =>\n        set(\n          anAtom,\n          produce(\n            get(anAtom),\n            typeof fn === 'function'\n              ? (fn as (draft: Draft<Value>) => void)\n              : () => fn\n          )\n        )\n    )\n    return derivedAtom\n  }, anAtom)\n}\n","import { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { atom } from 'jotai/vanilla'\nimport type { WritableAtom } from 'jotai/vanilla'\n\nexport function atomWithImmer<Value>(\n  initialValue: Value\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], void> {\n  const anAtom: any = atom(\n    initialValue,\n    (get, set, fn: Value | ((draft: Draft<Value>) => void)) =>\n      set(\n        anAtom,\n        produce(\n          get(anAtom),\n          typeof fn === 'function'\n            ? (fn as (draft: Draft<Value>) => void)\n            : () => fn\n        )\n      )\n  )\n  return anAtom\n}\n","import { useCallback } from 'react'\nimport { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { useAtom } from 'jotai/react'\nimport type { WritableAtom } from 'jotai/vanilla'\n\ntype Scope = NonNullable<Parameters<typeof useAtom>[1]>\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(draft: Draft<Value>) => void], Result>,\n  scope?: Scope\n): [Value, (fn: (draft: Draft<Value>) => void) => Result]\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(value: Value) => Value], Result>,\n  scope?: Scope\n): [Value, (fn: (draft: Draft<Value>) => void) => Result]\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(value: Value) => Value], Result>,\n  scope?: Scope\n) {\n  const [state, setState] = useAtom(anAtom, scope)\n  const setStateWithImmer = useCallback(\n    (fn: (draft: Draft<Value>) => void) => setState(produce(fn)),\n    [setState]\n  )\n  return [state, setStateWithImmer]\n}\n"],"names":["cache1","WeakMap","atomWithImmer","initialValue","anAtom","atom","get","set","fn","produce","scope","_useAtom","useAtom","setState","useCallback","withImmer","create","has","dep1"],"mappings":"8YAKA,IAAYA,EAAG,IAAaC,wBCAZC,SACdC,GAEA,IAAYC,EAAQC,EAAAA,KAClBF,EACA,SAACG,EAAKC,EAAKC,GAA2C,OACjDD,EACDH,EACAK,UACEH,EAAIF,GACU,qBACTI,EACD,WAAA,OAAQA,CAAA,GAEf,GAEL,OACFJ,CAAA,iBCJgB,SACdA,EACAM,GAEA,IAAAC,EAA0BC,EAAOA,QAACR,EAAQM,GAA5BG,EACdF,EAAA,GAIA,MAAO,CALOE,EAAAA,GACYC,EAAWA,YACnC,SAACN,GAAsCK,OAAAA,EAASJ,EAAAA,QAAQD,GAAI,EAC5D,CAACK,IAGL,cFXgBE,SACdX,GAEA,OAdgBY,EAcH,WAcX,OAboBX,EAAIA,KACtB,SAACC,UAAWA,EAACF,EAAO,EACpB,SAACE,EAAKC,EAAKC,GAA2C,OACjDD,EACDH,EACAK,EAAOA,QACLH,EAAIF,GACU,mBAALI,EACJA,EACD,WAAA,OAAQA,CAAA,GAEf,EAGP,GA5BCR,EAAOiB,IADyBC,EA6B9Bd,GA5BiBJ,EAASA,EAAOO,IAAIW,EAAMF,MAAWV,IAAIY,GADjD,IAAIF,EAAiBE,CA8BnC"}