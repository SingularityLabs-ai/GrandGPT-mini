{"version":3,"file":"index.modern.mjs","sources":["../src/atomWithImmer.ts","../src/withImmer.ts","../src/useImmerAtom.ts"],"sourcesContent":["import { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { atom } from 'jotai/vanilla'\nimport type { WritableAtom } from 'jotai/vanilla'\n\nexport function atomWithImmer<Value>(\n  initialValue: Value\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], void> {\n  const anAtom: any = atom(\n    initialValue,\n    (get, set, fn: Value | ((draft: Draft<Value>) => void)) =>\n      set(\n        anAtom,\n        produce(\n          get(anAtom),\n          typeof fn === 'function'\n            ? (fn as (draft: Draft<Value>) => void)\n            : () => fn\n        )\n      )\n  )\n  return anAtom\n}\n","import { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { atom } from 'jotai/vanilla'\nimport type { PrimitiveAtom, WritableAtom } from 'jotai/vanilla'\n\nconst cache1 = new WeakMap()\nconst memo1 = <T>(create: () => T, dep1: object): T =>\n  (cache1.has(dep1) ? cache1 : cache1.set(dep1, create())).get(dep1)\n\nexport function withImmer<Value>(\n  anAtom: PrimitiveAtom<Value>\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], void>\n\nexport function withImmer<Value, Result>(\n  anAtom: WritableAtom<Value, [Value], Result>\n): WritableAtom<Value, [Value | ((draft: Draft<Value>) => void)], Result>\n\nexport function withImmer<Value, Result>(\n  anAtom: WritableAtom<Value, [Value], Result>\n) {\n  return memo1(() => {\n    const derivedAtom = atom(\n      (get) => get(anAtom),\n      (get, set, fn: Value | ((draft: Draft<Value>) => void)) =>\n        set(\n          anAtom,\n          produce(\n            get(anAtom),\n            typeof fn === 'function'\n              ? (fn as (draft: Draft<Value>) => void)\n              : () => fn\n          )\n        )\n    )\n    return derivedAtom\n  }, anAtom)\n}\n","import { useCallback } from 'react'\nimport { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport { useAtom } from 'jotai/react'\nimport type { WritableAtom } from 'jotai/vanilla'\n\ntype Scope = NonNullable<Parameters<typeof useAtom>[1]>\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(draft: Draft<Value>) => void], Result>,\n  scope?: Scope\n): [Value, (fn: (draft: Draft<Value>) => void) => Result]\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(value: Value) => Value], Result>,\n  scope?: Scope\n): [Value, (fn: (draft: Draft<Value>) => void) => Result]\n\nexport function useImmerAtom<Value, Result>(\n  anAtom: WritableAtom<Value, [(value: Value) => Value], Result>,\n  scope?: Scope\n) {\n  const [state, setState] = useAtom(anAtom, scope)\n  const setStateWithImmer = useCallback(\n    (fn: (draft: Draft<Value>) => void) => setState(produce(fn)),\n    [setState]\n  )\n  return [state, setStateWithImmer]\n}\n"],"names":["atomWithImmer","initialValue","anAtom","atom","get","set","fn","produce","cache1","WeakMap","withImmer","create","has","dep1","useImmerAtom","scope","state","setState","useAtom","useCallback"],"mappings":"+IAKgBA,SAAAA,EACdC,GAEA,MAAYC,EAAQC,EAClBF,EACA,CAACG,EAAKC,EAAKC,IACTD,EACEH,EACAK,EACEH,EAAIF,GACU,qBACTI,EACD,IAAMA,KAIlB,OACFJ,CAAA,CCjBA,MAAYM,EAAG,IAAaC,QAYtB,SAAmBC,EACvBR,GAEA,OAdgBS,EAcH,IACSR,EACjBC,GAAQA,EAAIF,GACb,CAACE,EAAKC,EAAKC,IACTD,EACEH,EACAK,EACEH,EAAIF,GACU,mBAAPI,EACFA,EACD,IAAMA,MAvBnBE,EAAOI,IADyBC,EA6B9BX,GA5BiBM,EAASA,EAAOH,IAAIQ,EAAMF,MAAWP,IAAIS,GADjD,IAAIF,EAAiBE,CA8BnC,CClBgB,SAAYC,EAC1BZ,EACAa,GAEA,MAAOC,EAAOC,GAAYC,EAAQhB,EAAQa,GAK1C,MAAO,CAACC,EAJkBG,EACvBb,GAAsCW,EAASV,EAAQD,IACxD,CAACW,IAGL"}